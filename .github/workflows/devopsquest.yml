name: Build and Deploy to GCP

on:
  workflow_call:
    inputs:
      repository_name:
        required: true
        type: string
      deployment_name:
        required: true
        type: string
      container_name:
        required: true
        type: string
      namespace:
        required: false
        type: string
        default: "default"
    secrets:
      GCP_PROJECT_ID:
        required: true
      GCP_ZONE:
        required: true
      GCP_CLUSTER_NAME:
        required: true
      GCP_SA_KEY:
        required: true
      GCP_ARTIFACT_REGISTRY:
        required: true
      GCP_ARTIFACT_REPOSITORY:
        required: true
      PERSONAL_ACCESS_TOKEN: # Segredo necessário para fazer push no repo de deployment
        required: true

jobs:
  build-and-push-gcp:
    name: Build and push to GCP
    runs-on: ubuntu-latest
    permissions:
      contents: read  # Read é suficiente para checkout inicial
      packages: write # Necessário se você usar GitHub Packages (não essencial para push GCR)

    steps:
    - name: Checkout repository (Código da Aplicação)
      uses: actions/checkout@v3

    # --- Autenticação e Build/Push da Imagem (sem alterações) ---
    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v4.3.0
      with:
        images: ${{ secrets.GCP_ARTIFACT_REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REPOSITORY }}/${{ inputs.repository_name }}
        tags: |
          type=sha,enable=true,prefix=${{ inputs.repository_name }}-,suffix=,format=short

    - name: Build image and push Google Cloud Artifact Registry
      uses: RafikFarhad/push-to-gcr-github-action@v5-rc1 # Considere usar docker/build-push-action oficial se possível
      with:
        registry: ${{ secrets.GCP_ARTIFACT_REGISTRY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REPOSITORY }}
        image_name: ${{ inputs.repository_name }}
        image_tag: ${{ steps.meta.outputs.version }}
        context: . # Ajuste o contexto se necessário

    - name: Save Image Tag
      run: echo "IMAGE_TAG=${{ steps.meta.outputs.version }}" >> $GITHUB_ENV

    # --- Checkout e Modificação do Repositório de Deployment ---
    # - name: Clone the Deployment Repository
    #   uses: actions/checkout@v3
    #   with:
    #     repository: 'willamysfernandes/DesafioDevops'  # Repo que contém o deployment.yaml
    #     path: 'deployment-repo'                      # Diretório temporário
    #     token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

    # # --- Autenticação e Configuração K8s (sem alterações) ---
    # - name: Authenticate to Google Cloud (para gcloud/kubectl)
    #   uses: google-github-actions/auth@v2
    #   with:
    #     credentials_json: ${{ secrets.GCP_SA_KEY }}

    # - name: Get GKE credentials
    #   uses: google-github-actions/get-gke-credentials@v2
    #   with:
    #     cluster_name: ${{ secrets.GCP_CLUSTER_NAME }}
    #     location: ${{ secrets.GCP_ZONE }}
    #     project_id: ${{ secrets.GCP_PROJECT_ID }} # Adicione project_id para clareza

    # --- Atualizar e Commitar o Deployment ---
    # - name: Update deployment.yaml with new image tag
    #   id: update_yaml
    #   run: |
    #     DEPLOYMENT_FILE="deployment-repo/base-test-api/K8S/deployment.yaml"
    #     OLD_IMAGE_PATTERN="us-central1-docker.pkg.dev/winter-surf-452116-n1/desafiodevops1/desafio:.*"
    #     NEW_IMAGE="us-central1-docker.pkg.dev/winter-surf-452116-n1/desafiodevops1/desafio:${{ env.IMAGE_TAG }}"

    #     echo "Updating $DEPLOYMENT_FILE"
    #     echo "Replacing pattern: $OLD_IMAGE_PATTERN"
    #     echo "With new image: $NEW_IMAGE"

    #     # Use um delimitador diferente (como #) se seus caminhos contêm /
    #     sed -i "s#${OLD_IMAGE_PATTERN}#${NEW_IMAGE}#" "$DEPLOYMENT_FILE"

    #     # Verifica se o arquivo foi modificado
    #     if git -C deployment-repo diff --quiet "$DEPLOYMENT_FILE"; then
    #       echo "::set-output name=changed::false"
    #       echo "Deployment file was not changed."
    #     else
    #       echo "::set-output name=changed::true"
    #       echo "Deployment file updated."
    #     fi
    #   shell: bash


    # - name: Commit and Push Updated Deployment
    #   if: steps.update_yaml.outputs.changed == 'true'
    #   run: |
    #     cd deployment-repo
    #     git config user.name "github-actions"
    #     git config user.email "github-actions@users.noreply.github.com"

    #     echo "Adding deployment file..."
    #     git add base-test-api/K8S/deployment.yaml

    #     echo "Committing changes..."
    #     git commit -m "Update deployment.yaml with image tag ${{ env.IMAGE_TAG }} [CI Skip]"

    #     echo "Pushing changes to current branch..."
    #     git push
    #   shell: bash


    # --- Aplicar o Deployment no GKE (Opcional, pode ser feito aqui ou em outro job/workflow) ---
    # - name: Apply updated deployment to GKE
    #   if: steps.update_yaml.outputs.changed == 'true' # Só aplica se foi commitado
    #   run: |
    #     kubectl apply -f deployment-repo/base-test-api/K8S/deployment.yaml -n ${{ inputs.namespace }}